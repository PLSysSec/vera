(declare-fun |left start range_upper| () (_ BitVec 32))
(declare-fun |left start range_lower| () (_ BitVec 32))
(declare-fun |left start range_hasLowerBound| () (_ BitVec 1))
(declare-fun |left start range_hasUpperBound| () (_ BitVec 1))
(declare-fun |right start range_upper| () (_ BitVec 32))
(declare-fun |right start range_lower| () (_ BitVec 32))
(declare-fun |right start range_hasLowerBound| () (_ BitVec 1))
(declare-fun |right start range_hasUpperBound| () (_ BitVec 1))
(declare-fun |right start range_exp| () (_ BitVec 16))
(declare-fun |left start range_exp| () (_ BitVec 16))
(declare-fun result_exp () (_ BitVec 16))
(declare-fun result_exp_undef () (_ BitVec 1))
(declare-fun |right start range_hasFract| () (_ BitVec 1))
(declare-fun |left start range_hasFract| () (_ BitVec 1))
(declare-fun result_hasFract () (_ BitVec 1))
(declare-fun result_hasFract_undef () (_ BitVec 1))
(declare-fun |right start range_negZero| () (_ BitVec 1))
(declare-fun |left start range_negZero| () (_ BitVec 1))
(declare-fun result_negZero () (_ BitVec 1))
(declare-fun result_negZero_undef () (_ BitVec 1))
(declare-fun result_lower () (_ BitVec 32))
(declare-fun result_lower_undef () (_ BitVec 1))
(declare-fun result_hasLowerBound () (_ BitVec 1))
(declare-fun result_hasLowerBound_undef () (_ BitVec 1))
(declare-fun result_upper () (_ BitVec 32))
(declare-fun result_upper_undef () (_ BitVec 1))
(declare-fun result_hasUpperBound () (_ BitVec 1))
(declare-fun result_hasUpperBound_undef () (_ BitVec 1))
(declare-fun left () (_ FloatingPoint 11 53))
(declare-fun right () (_ FloatingPoint 11 53))
(assert (= (ite (bvsle |left start range_lower| |left start range_upper|) #b1 #b0) #b1))
(assert (let ((a!1 (ite (fp.leq ((_ to_fp 11 53)
                          roundNearestTiesToEven
                          ((_ zero_extend 32) |left start range_lower|))
                        ((_ to_fp 11 53)
                          roundNearestTiesToEven
                          ((_ zero_extend 32) |left start range_upper|)))
                #b1
                #b0)))
  (= a!1 #b1)))
(assert (= (bvor (ite (= |left start range_lower| #x80000000) #b1 #b0)
         |left start range_hasLowerBound|)
   #b1))
(assert (= (bvor (ite (= |left start range_upper| #x7fffffff) #b1 #b0)
         |left start range_hasUpperBound|)
   #b1))
(assert (= (ite (bvsle |right start range_lower| |right start range_upper|) #b1 #b0)
   #b1))
(assert (let ((a!1 (ite (fp.leq ((_ to_fp 11 53)
                          roundNearestTiesToEven
                          ((_ zero_extend 32) |right start range_lower|))
                        ((_ to_fp 11 53)
                          roundNearestTiesToEven
                          ((_ zero_extend 32) |right start range_upper|)))
                #b1
                #b0)))
  (= a!1 #b1)))
(assert (= (bvor (ite (= |right start range_lower| #x80000000) #b1 #b0)
         |right start range_hasLowerBound|)
   #b1))
(assert (= (bvor (ite (= |right start range_upper| #x7fffffff) #b1 #b0)
         |right start range_hasUpperBound|)
   #b1))
(assert (let ((a!1 (bvand (ite (bvuge |left start range_exp| (bvadd #x0001 #x03ff))
                       #b1
                       #b0)
                  (ite (bvuge |right start range_exp| (bvadd #x0001 #x03ff))
                       #b1
                       #b0)))
      (a!2 (ite (bvugt (bvsub (bvadd |left start range_exp|
                                     #x0001
                                     |right start range_exp|
                                     #x0001)
                              #x0001)
                       #x03ff)
                #b1
                #b0))
      (a!3 (bvand (ite (bvsge #x00000000 |right start range_lower|) #b1 #b0)
                  (ite (bvsle #x00000000 |right start range_upper|) #b1 #b0)
                  (ite (bvuge |left start range_exp| (bvadd #x0001 #x03ff))
                       #b1
                       #b0)))
      (a!4 (bvand (ite (bvsge #x00000000 |left start range_lower|) #b1 #b0)
                  (ite (bvsle #x00000000 |left start range_upper|) #b1 #b0)
                  (ite (bvuge |right start range_exp| (bvadd #x0001 #x03ff))
                       #b1
                       #b0))))
(let ((a!5 (bvand (bvnot a!3)
                  (bvnot (ite (= |left start range_exp| #xffff) #b1 #b0))
                  (bvnot (ite (= |right start range_exp| #xffff) #b1 #b0))
                  (bvnot a!4))))
  (= result_exp
     (ite (= a!1 #b1)
          (ite (= a!2 #b1) (bvadd #x0001 #x03ff) #x03ff)
          (ite (= a!5 #b1) (bvadd #x0001 #x03ff) #xffff))))))
(assert (let ((a!1 (= ((_ extract 16 16)
                (bvadd ((_ zero_extend 1) #x0001) ((_ zero_extend 1) #x03ff)))
              #b0))
      (a!2 (ite (=> (and (bvslt #x0001 #x0000) (bvslt #x03ff #x0000))
                    (bvslt (bvadd #x0001 #x03ff) #x0000))
                #b1
                #b0))
      (a!5 (= ((_ extract 16 16)
                (bvadd ((_ zero_extend 1) |left start range_exp|)
                       ((_ zero_extend 1) #x0001)))
              #b0))
      (a!6 (ite (=> (and (bvslt |left start range_exp| #x0000)
                         (bvslt #x0001 #x0000))
                    (bvslt (bvadd |left start range_exp| #x0001) #x0000))
                #b1
                #b0))
      (a!7 (= ((_ extract 16 16)
                (bvadd ((_ zero_extend 1) |right start range_exp|)
                       ((_ zero_extend 1) #x0001)))
              #b0))
      (a!8 (ite (=> (and (bvslt |right start range_exp| #x0000)
                         (bvslt #x0001 #x0000))
                    (bvslt (bvadd |right start range_exp| #x0001) #x0000))
                #b1
                #b0))
      (a!9 ((_ extract 16 16)
             (bvadd ((_ zero_extend 1) (bvadd |left start range_exp| #x0001))
                    ((_ zero_extend 1) (bvadd |right start range_exp| #x0001)))))
      (a!10 (=> (and (bvslt (bvadd |left start range_exp| #x0001) #x0000)
                     (bvslt (bvadd |right start range_exp| #x0001) #x0000))
                (bvslt (bvadd (bvadd |left start range_exp| #x0001)
                              (bvadd |right start range_exp| #x0001))
                       #x0000)))
      (a!11 (and (bvslt #x0000
                        (bvadd (bvadd |left start range_exp| #x0001)
                               (bvadd |right start range_exp| #x0001)))
                 (bvslt #x0000 (bvneg #x0001))))
      (a!12 (bvadd (bvadd (bvadd |left start range_exp| #x0001)
                          (bvadd |right start range_exp| #x0001))
                   (bvneg #x0001)))
      (a!14 (and (bvslt (bvadd (bvadd |left start range_exp| #x0001)
                               (bvadd |right start range_exp| #x0001))
                        #x0000)
                 (bvslt (bvneg #x0001) #x0000))))
(let ((a!3 (bvor (bvor #b0 #b0) (bvnot (ite a!1 #b1 #b0)) (bvnot a!2)))
      (a!13 (ite (= #x0001 (bvshl #x0001 #x000f))
                 (bvslt (bvadd (bvadd |left start range_exp| #x0001)
                               (bvadd |right start range_exp| #x0001))
                        #x0000)
                 (=> a!11 (bvslt #x0000 a!12))))
      (a!15 (ite (=> (bvslt #x0000 #x0001) (=> a!14 (bvslt a!12 #x0000)))
                 #b1
                 #b0)))
(let ((a!4 (bvor (bvor (bvor #b0 #b0) (bvor #b0 #b0)) (bvor #b0 a!3))))
(let ((a!16 (bvor #b0
                  a!4
                  (bvor (bvor #b0 #b0) (bvor #b0 #b0))
                  a!4
                  a!3
                  (bvor #b0 a!3)
                  (bvor #b0 a!3)
                  #b0
                  (bvor #b0 #b0)
                  (bvnot (ite a!5 #b1 #b0))
                  (bvnot a!6)
                  (bvor #b0 #b0)
                  (bvnot (ite a!7 #b1 #b0))
                  (bvnot a!8)
                  (bvnot (ite (= a!9 #b0) #b1 #b0))
                  (bvnot (ite a!10 #b1 #b0))
                  #b0
                  (bvnot (ite a!13 #b1 #b0))
                  (bvnot a!15)
                  #b0
                  a!3)))
  (= result_exp_undef a!16))))))
(assert (= result_hasFract
   (bvor |left start range_hasFract| |right start range_hasFract|)))
(assert (= result_hasFract_undef (bvor #b0 #b0)))
(assert (let ((a!1 (bvand (bvor |left start range_negZero|
                        (bvnot |left start range_hasLowerBound|)
                        (ite (bvslt |left start range_lower| #x00000000)
                             #b1
                             #b0))
                  (ite (bvsge |right start range_upper| #x00000000) #b1 #b0)))
      (a!2 (bvand (bvor |right start range_negZero|
                        (bvnot |right start range_hasLowerBound|)
                        (ite (bvslt |right start range_lower| #x00000000)
                             #b1
                             #b0))
                  (ite (bvsge |left start range_upper| #x00000000) #b1 #b0))))
  (= result_negZero (bvor a!1 a!2))))
(assert (= result_negZero_undef
   (bvor (bvor #b0 #b0 (bvor #b0 #b0) (bvor #b0 #b0))
         (bvor #b0 #b0 (bvor #b0 #b0) (bvor #b0 #b0)))))
(assert (let ((a!1 (= (bvor (bvnot (bvand |left start range_hasLowerBound|
                                  |left start range_hasUpperBound|))
                    (bvnot (bvand |right start range_hasLowerBound|
                                  |right start range_hasUpperBound|)))
              #b1))
      (a!2 (ite (bvsle (bvmul ((_ sign_extend 32) |left start range_upper|)
                              ((_ sign_extend 32) |right start range_upper|))
                       (bvmul ((_ sign_extend 32) |left start range_upper|)
                              ((_ sign_extend 32) |right start range_lower|)))
                #b1
                #b0))
      (a!4 (ite (bvsle (bvmul ((_ sign_extend 32) |left start range_lower|)
                              ((_ sign_extend 32) |right start range_upper|))
                       (bvmul ((_ sign_extend 32) |left start range_lower|)
                              ((_ sign_extend 32) |right start range_lower|)))
                #b1
                #b0)))
(let ((a!3 (ite (= a!2 #b1)
                (bvmul ((_ sign_extend 32) |left start range_upper|)
                       ((_ sign_extend 32) |right start range_upper|))
                (bvmul ((_ sign_extend 32) |left start range_upper|)
                       ((_ sign_extend 32) |right start range_lower|))))
      (a!5 (ite (= a!4 #b1)
                (bvmul ((_ sign_extend 32) |left start range_lower|)
                       ((_ sign_extend 32) |right start range_upper|))
                (bvmul ((_ sign_extend 32) |left start range_lower|)
                       ((_ sign_extend 32) |right start range_lower|)))))
(let ((a!6 (ite (= (ite (bvsle a!3 a!5) #b1 #b0) #b1) a!3 a!5)))
(let ((a!7 (bvslt (ite a!1
                       (bvsub ((_ sign_extend 32) #x80000000)
                              #x0000000000000001)
                       a!6)
                  ((_ sign_extend 32) #x80000000)))
      (a!8 (bvsgt (ite a!1
                       (bvsub ((_ sign_extend 32) #x80000000)
                              #x0000000000000001)
                       a!6)
                  ((_ sign_extend 32) #x7fffffff)))
      (a!9 ((_ extract 31 0)
             (ite a!1
                  (bvsub ((_ sign_extend 32) #x80000000) #x0000000000000001)
                  a!6))))
(let ((a!10 (ite (= (ite a!7 #b1 #b0) #b1)
                 #x80000000
                 (ite (= (ite a!8 #b1 #b0) #b1) #x7fffffff a!9))))
  (= a!10 result_lower)))))))
(assert (let ((a!1 (bvnot (ite (bvsmul_noovfl ((_ sign_extend 32)
                                        |left start range_upper|)
                                      ((_ sign_extend 32)
                                        |right start range_upper|))
                       #b1
                       #b0)))
      (a!2 (bvnot (ite (bvsmul_noudfl ((_ sign_extend 32)
                                        |left start range_upper|)
                                      ((_ sign_extend 32)
                                        |right start range_upper|))
                       #b1
                       #b0)))
      (a!3 (bvnot (ite (bvsmul_noovfl ((_ sign_extend 32)
                                        |left start range_upper|)
                                      ((_ sign_extend 32)
                                        |right start range_lower|))
                       #b1
                       #b0)))
      (a!4 (bvnot (ite (bvsmul_noudfl ((_ sign_extend 32)
                                        |left start range_upper|)
                                      ((_ sign_extend 32)
                                        |right start range_lower|))
                       #b1
                       #b0)))
      (a!5 (bvnot (ite (bvsmul_noovfl ((_ sign_extend 32)
                                        |left start range_lower|)
                                      ((_ sign_extend 32)
                                        |right start range_upper|))
                       #b1
                       #b0)))
      (a!6 (bvnot (ite (bvsmul_noudfl ((_ sign_extend 32)
                                        |left start range_lower|)
                                      ((_ sign_extend 32)
                                        |right start range_upper|))
                       #b1
                       #b0)))
      (a!7 (bvnot (ite (bvsmul_noovfl ((_ sign_extend 32)
                                        |left start range_lower|)
                                      ((_ sign_extend 32)
                                        |right start range_lower|))
                       #b1
                       #b0)))
      (a!8 (bvnot (ite (bvsmul_noudfl ((_ sign_extend 32)
                                        |left start range_lower|)
                                      ((_ sign_extend 32)
                                        |right start range_lower|))
                       #b1
                       #b0)))
      (a!9 (=> (and (bvslt #x0000000000000000 ((_ sign_extend 32) #x80000000))
                    (bvslt #x0000000000000000 (bvneg #x0000000000000001)))
               (bvslt #x0000000000000000
                      (bvadd ((_ sign_extend 32) #x80000000)
                             (bvneg #x0000000000000001)))))
      (a!11 (=> (and (bvslt ((_ sign_extend 32) #x80000000) #x0000000000000000)
                     (bvslt (bvneg #x0000000000000001) #x0000000000000000))
                (bvslt (bvadd ((_ sign_extend 32) #x80000000)
                              (bvneg #x0000000000000001))
                       #x0000000000000000))))
(let ((a!10 (ite (ite (= #x0000000000000001
                         (bvshl #x0000000000000001 #x000000000000003f))
                      (bvslt ((_ sign_extend 32) #x80000000) #x0000000000000000)
                      a!9)
                 #b1
                 #b0))
      (a!12 (bvnot (ite (=> (bvslt #x0000000000000000 #x0000000000000001) a!11)
                        #b1
                        #b0))))
(let ((a!13 (bvor (bvor #b0 #b0)
                  a!1
                  a!2
                  (bvor #b0 #b0)
                  a!3
                  a!4
                  (bvor #b0 #b0)
                  a!5
                  a!6
                  (bvor #b0 #b0)
                  a!7
                  a!8
                  (bvor #b0 #b0)
                  (bvor #b0 #b0)
                  (bvor #b0 #b0)
                  (bvnot a!10)
                  a!12)))
  (= (bvor a!13 (bvor a!13 #b0 #b0) (bvor a!13 #b0 #b0)) result_lower_undef)))))
(assert (let ((a!1 (= (bvor (bvnot (bvand |left start range_hasLowerBound|
                                  |left start range_hasUpperBound|))
                    (bvnot (bvand |right start range_hasLowerBound|
                                  |right start range_hasUpperBound|)))
              #b1))
      (a!2 (ite (bvsle (bvmul ((_ sign_extend 32) |left start range_upper|)
                              ((_ sign_extend 32) |right start range_upper|))
                       (bvmul ((_ sign_extend 32) |left start range_upper|)
                              ((_ sign_extend 32) |right start range_lower|)))
                #b1
                #b0))
      (a!4 (ite (bvsle (bvmul ((_ sign_extend 32) |left start range_lower|)
                              ((_ sign_extend 32) |right start range_upper|))
                       (bvmul ((_ sign_extend 32) |left start range_lower|)
                              ((_ sign_extend 32) |right start range_lower|)))
                #b1
                #b0)))
(let ((a!3 (ite (= a!2 #b1)
                (bvmul ((_ sign_extend 32) |left start range_upper|)
                       ((_ sign_extend 32) |right start range_upper|))
                (bvmul ((_ sign_extend 32) |left start range_upper|)
                       ((_ sign_extend 32) |right start range_lower|))))
      (a!5 (ite (= a!4 #b1)
                (bvmul ((_ sign_extend 32) |left start range_lower|)
                       ((_ sign_extend 32) |right start range_upper|))
                (bvmul ((_ sign_extend 32) |left start range_lower|)
                       ((_ sign_extend 32) |right start range_lower|)))))
(let ((a!6 (ite (= (ite (bvsle a!3 a!5) #b1 #b0) #b1) a!3 a!5)))
(let ((a!7 (bvslt (ite a!1
                       (bvsub ((_ sign_extend 32) #x80000000)
                              #x0000000000000001)
                       a!6)
                  ((_ sign_extend 32) #x80000000)))
      (a!8 (bvsgt (ite a!1
                       (bvsub ((_ sign_extend 32) #x80000000)
                              #x0000000000000001)
                       a!6)
                  ((_ sign_extend 32) #x7fffffff))))
(let ((a!9 (ite (= (ite a!7 #b1 #b0) #b1)
                #b0
                (ite (= (ite a!8 #b1 #b0) #b1) #b1 #b1))))
  (= a!9 result_hasLowerBound)))))))
(assert (let ((a!1 (bvnot (ite (bvsmul_noovfl ((_ sign_extend 32)
                                        |left start range_upper|)
                                      ((_ sign_extend 32)
                                        |right start range_upper|))
                       #b1
                       #b0)))
      (a!2 (bvnot (ite (bvsmul_noudfl ((_ sign_extend 32)
                                        |left start range_upper|)
                                      ((_ sign_extend 32)
                                        |right start range_upper|))
                       #b1
                       #b0)))
      (a!3 (bvnot (ite (bvsmul_noovfl ((_ sign_extend 32)
                                        |left start range_upper|)
                                      ((_ sign_extend 32)
                                        |right start range_lower|))
                       #b1
                       #b0)))
      (a!4 (bvnot (ite (bvsmul_noudfl ((_ sign_extend 32)
                                        |left start range_upper|)
                                      ((_ sign_extend 32)
                                        |right start range_lower|))
                       #b1
                       #b0)))
      (a!5 (bvnot (ite (bvsmul_noovfl ((_ sign_extend 32)
                                        |left start range_lower|)
                                      ((_ sign_extend 32)
                                        |right start range_upper|))
                       #b1
                       #b0)))
      (a!6 (bvnot (ite (bvsmul_noudfl ((_ sign_extend 32)
                                        |left start range_lower|)
                                      ((_ sign_extend 32)
                                        |right start range_upper|))
                       #b1
                       #b0)))
      (a!7 (bvnot (ite (bvsmul_noovfl ((_ sign_extend 32)
                                        |left start range_lower|)
                                      ((_ sign_extend 32)
                                        |right start range_lower|))
                       #b1
                       #b0)))
      (a!8 (bvnot (ite (bvsmul_noudfl ((_ sign_extend 32)
                                        |left start range_lower|)
                                      ((_ sign_extend 32)
                                        |right start range_lower|))
                       #b1
                       #b0)))
      (a!9 (=> (and (bvslt #x0000000000000000 ((_ sign_extend 32) #x80000000))
                    (bvslt #x0000000000000000 (bvneg #x0000000000000001)))
               (bvslt #x0000000000000000
                      (bvadd ((_ sign_extend 32) #x80000000)
                             (bvneg #x0000000000000001)))))
      (a!11 (=> (and (bvslt ((_ sign_extend 32) #x80000000) #x0000000000000000)
                     (bvslt (bvneg #x0000000000000001) #x0000000000000000))
                (bvslt (bvadd ((_ sign_extend 32) #x80000000)
                              (bvneg #x0000000000000001))
                       #x0000000000000000))))
(let ((a!10 (ite (ite (= #x0000000000000001
                         (bvshl #x0000000000000001 #x000000000000003f))
                      (bvslt ((_ sign_extend 32) #x80000000) #x0000000000000000)
                      a!9)
                 #b1
                 #b0))
      (a!12 (bvnot (ite (=> (bvslt #x0000000000000000 #x0000000000000001) a!11)
                        #b1
                        #b0))))
(let ((a!13 (bvor (bvor #b0 #b0)
                  a!1
                  a!2
                  (bvor #b0 #b0)
                  a!3
                  a!4
                  (bvor #b0 #b0)
                  a!5
                  a!6
                  (bvor #b0 #b0)
                  a!7
                  a!8
                  (bvor #b0 #b0)
                  (bvor #b0 #b0)
                  (bvor #b0 #b0)
                  (bvnot a!10)
                  a!12
                  #b0
                  #b0)))
  (= (bvor #b0 a!13 a!13) result_hasLowerBound_undef)))))
(assert (let ((a!1 (= (bvor (bvnot (bvand |left start range_hasLowerBound|
                                  |left start range_hasUpperBound|))
                    (bvnot (bvand |right start range_hasLowerBound|
                                  |right start range_hasUpperBound|)))
              #b1))
      (a!2 (ite (bvsge (bvmul ((_ sign_extend 32) |left start range_upper|)
                              ((_ sign_extend 32) |right start range_upper|))
                       (bvmul ((_ sign_extend 32) |left start range_upper|)
                              ((_ sign_extend 32) |right start range_lower|)))
                #b1
                #b0))
      (a!4 (ite (bvsge (bvmul ((_ sign_extend 32) |left start range_lower|)
                              ((_ sign_extend 32) |right start range_upper|))
                       (bvmul ((_ sign_extend 32) |left start range_lower|)
                              ((_ sign_extend 32) |right start range_lower|)))
                #b1
                #b0)))
(let ((a!3 (ite (= a!2 #b1)
                (bvmul ((_ sign_extend 32) |left start range_upper|)
                       ((_ sign_extend 32) |right start range_upper|))
                (bvmul ((_ sign_extend 32) |left start range_upper|)
                       ((_ sign_extend 32) |right start range_lower|))))
      (a!5 (ite (= a!4 #b1)
                (bvmul ((_ sign_extend 32) |left start range_lower|)
                       ((_ sign_extend 32) |right start range_upper|))
                (bvmul ((_ sign_extend 32) |left start range_lower|)
                       ((_ sign_extend 32) |right start range_lower|)))))
(let ((a!6 (ite (= (ite (bvsge a!3 a!5) #b1 #b0) #b1) a!3 a!5)))
(let ((a!7 (bvslt (ite a!1
                       (bvadd ((_ sign_extend 32) #x7fffffff)
                              #x0000000000000001)
                       a!6)
                  ((_ sign_extend 32) #x80000000)))
      (a!8 (bvsgt (ite a!1
                       (bvadd ((_ sign_extend 32) #x7fffffff)
                              #x0000000000000001)
                       a!6)
                  ((_ sign_extend 32) #x7fffffff)))
      (a!9 ((_ extract 31 0)
             (ite a!1
                  (bvadd ((_ sign_extend 32) #x7fffffff) #x0000000000000001)
                  a!6))))
(let ((a!10 (ite (= (ite a!7 #b1 #b0) #b1)
                 #x80000000
                 (ite (= (ite a!8 #b1 #b0) #b1) #x7fffffff a!9))))
  (= a!10 result_upper)))))))
(assert (let ((a!1 (bvnot (ite (bvsmul_noovfl ((_ sign_extend 32)
                                        |left start range_upper|)
                                      ((_ sign_extend 32)
                                        |right start range_upper|))
                       #b1
                       #b0)))
      (a!2 (bvnot (ite (bvsmul_noudfl ((_ sign_extend 32)
                                        |left start range_upper|)
                                      ((_ sign_extend 32)
                                        |right start range_upper|))
                       #b1
                       #b0)))
      (a!3 (bvnot (ite (bvsmul_noovfl ((_ sign_extend 32)
                                        |left start range_upper|)
                                      ((_ sign_extend 32)
                                        |right start range_lower|))
                       #b1
                       #b0)))
      (a!4 (bvnot (ite (bvsmul_noudfl ((_ sign_extend 32)
                                        |left start range_upper|)
                                      ((_ sign_extend 32)
                                        |right start range_lower|))
                       #b1
                       #b0)))
      (a!5 (bvnot (ite (bvsmul_noovfl ((_ sign_extend 32)
                                        |left start range_lower|)
                                      ((_ sign_extend 32)
                                        |right start range_upper|))
                       #b1
                       #b0)))
      (a!6 (bvnot (ite (bvsmul_noudfl ((_ sign_extend 32)
                                        |left start range_lower|)
                                      ((_ sign_extend 32)
                                        |right start range_upper|))
                       #b1
                       #b0)))
      (a!7 (bvnot (ite (bvsmul_noovfl ((_ sign_extend 32)
                                        |left start range_lower|)
                                      ((_ sign_extend 32)
                                        |right start range_lower|))
                       #b1
                       #b0)))
      (a!8 (bvnot (ite (bvsmul_noudfl ((_ sign_extend 32)
                                        |left start range_lower|)
                                      ((_ sign_extend 32)
                                        |right start range_lower|))
                       #b1
                       #b0)))
      (a!9 (=> (and (bvslt #x0000000000000000 ((_ sign_extend 32) #x7fffffff))
                    (bvslt #x0000000000000000 #x0000000000000001))
               (bvslt #x0000000000000000
                      (bvadd ((_ sign_extend 32) #x7fffffff) #x0000000000000001))))
      (a!10 (=> (and (bvslt ((_ sign_extend 32) #x7fffffff) #x0000000000000000)
                     (bvslt #x0000000000000001 #x0000000000000000))
                (bvslt (bvadd ((_ sign_extend 32) #x7fffffff)
                              #x0000000000000001)
                       #x0000000000000000))))
(let ((a!11 (bvor (bvor #b0 #b0)
                  a!1
                  a!2
                  (bvor #b0 #b0)
                  a!3
                  a!4
                  (bvor #b0 #b0)
                  a!5
                  a!6
                  (bvor #b0 #b0)
                  a!7
                  a!8
                  (bvor #b0 #b0)
                  (bvor #b0 #b0)
                  (bvor #b0 #b0)
                  (bvnot (ite a!9 #b1 #b0))
                  (bvnot (ite a!10 #b1 #b0)))))
  (= (bvor a!11 (bvor a!11 #b0 #b0) (bvor a!11 #b0 #b0)) result_upper_undef))))
(assert (let ((a!1 (= (bvor (bvnot (bvand |left start range_hasLowerBound|
                                  |left start range_hasUpperBound|))
                    (bvnot (bvand |right start range_hasLowerBound|
                                  |right start range_hasUpperBound|)))
              #b1))
      (a!2 (ite (bvsge (bvmul ((_ sign_extend 32) |left start range_upper|)
                              ((_ sign_extend 32) |right start range_upper|))
                       (bvmul ((_ sign_extend 32) |left start range_upper|)
                              ((_ sign_extend 32) |right start range_lower|)))
                #b1
                #b0))
      (a!4 (ite (bvsge (bvmul ((_ sign_extend 32) |left start range_lower|)
                              ((_ sign_extend 32) |right start range_upper|))
                       (bvmul ((_ sign_extend 32) |left start range_lower|)
                              ((_ sign_extend 32) |right start range_lower|)))
                #b1
                #b0)))
(let ((a!3 (ite (= a!2 #b1)
                (bvmul ((_ sign_extend 32) |left start range_upper|)
                       ((_ sign_extend 32) |right start range_upper|))
                (bvmul ((_ sign_extend 32) |left start range_upper|)
                       ((_ sign_extend 32) |right start range_lower|))))
      (a!5 (ite (= a!4 #b1)
                (bvmul ((_ sign_extend 32) |left start range_lower|)
                       ((_ sign_extend 32) |right start range_upper|))
                (bvmul ((_ sign_extend 32) |left start range_lower|)
                       ((_ sign_extend 32) |right start range_lower|)))))
(let ((a!6 (ite (= (ite (bvsge a!3 a!5) #b1 #b0) #b1) a!3 a!5)))
(let ((a!7 (bvslt (ite a!1
                       (bvadd ((_ sign_extend 32) #x7fffffff)
                              #x0000000000000001)
                       a!6)
                  ((_ sign_extend 32) #x80000000)))
      (a!8 (bvsgt (ite a!1
                       (bvadd ((_ sign_extend 32) #x7fffffff)
                              #x0000000000000001)
                       a!6)
                  ((_ sign_extend 32) #x7fffffff))))
(let ((a!9 (ite (= (ite a!7 #b1 #b0) #b1)
                #b1
                (ite (= (ite a!8 #b1 #b0) #b1) #b0 #b1))))
  (= a!9 result_hasUpperBound)))))))
(assert (let ((a!1 (bvnot (ite (bvsmul_noovfl ((_ sign_extend 32)
                                        |left start range_upper|)
                                      ((_ sign_extend 32)
                                        |right start range_upper|))
                       #b1
                       #b0)))
      (a!2 (bvnot (ite (bvsmul_noudfl ((_ sign_extend 32)
                                        |left start range_upper|)
                                      ((_ sign_extend 32)
                                        |right start range_upper|))
                       #b1
                       #b0)))
      (a!3 (bvnot (ite (bvsmul_noovfl ((_ sign_extend 32)
                                        |left start range_upper|)
                                      ((_ sign_extend 32)
                                        |right start range_lower|))
                       #b1
                       #b0)))
      (a!4 (bvnot (ite (bvsmul_noudfl ((_ sign_extend 32)
                                        |left start range_upper|)
                                      ((_ sign_extend 32)
                                        |right start range_lower|))
                       #b1
                       #b0)))
      (a!5 (bvnot (ite (bvsmul_noovfl ((_ sign_extend 32)
                                        |left start range_lower|)
                                      ((_ sign_extend 32)
                                        |right start range_upper|))
                       #b1
                       #b0)))
      (a!6 (bvnot (ite (bvsmul_noudfl ((_ sign_extend 32)
                                        |left start range_lower|)
                                      ((_ sign_extend 32)
                                        |right start range_upper|))
                       #b1
                       #b0)))
      (a!7 (bvnot (ite (bvsmul_noovfl ((_ sign_extend 32)
                                        |left start range_lower|)
                                      ((_ sign_extend 32)
                                        |right start range_lower|))
                       #b1
                       #b0)))
      (a!8 (bvnot (ite (bvsmul_noudfl ((_ sign_extend 32)
                                        |left start range_lower|)
                                      ((_ sign_extend 32)
                                        |right start range_lower|))
                       #b1
                       #b0)))
      (a!9 (=> (and (bvslt #x0000000000000000 ((_ sign_extend 32) #x7fffffff))
                    (bvslt #x0000000000000000 #x0000000000000001))
               (bvslt #x0000000000000000
                      (bvadd ((_ sign_extend 32) #x7fffffff) #x0000000000000001))))
      (a!10 (=> (and (bvslt ((_ sign_extend 32) #x7fffffff) #x0000000000000000)
                     (bvslt #x0000000000000001 #x0000000000000000))
                (bvslt (bvadd ((_ sign_extend 32) #x7fffffff)
                              #x0000000000000001)
                       #x0000000000000000))))
(let ((a!11 (bvor (bvor #b0 #b0)
                  a!1
                  a!2
                  (bvor #b0 #b0)
                  a!3
                  a!4
                  (bvor #b0 #b0)
                  a!5
                  a!6
                  (bvor #b0 #b0)
                  a!7
                  a!8
                  (bvor #b0 #b0)
                  (bvor #b0 #b0)
                  (bvor #b0 #b0)
                  (bvnot (ite a!9 #b1 #b0))
                  (bvnot (ite a!10 #b1 #b0))
                  #b0
                  #b0)))
  (= (bvor #b0 a!11 a!11) result_hasUpperBound_undef))))
(assert (let ((a!1 (bvxor (ite (bvult |left start range_exp| (bvadd #x0001 #x03ff))
                       #b1
                       #b0)
                  (ite (fp.isInfinite left) #b1 #b0))))
  (= a!1 #b1)))
(assert (let ((a!1 (bvxor (ite (bvult |left start range_exp| #xffff) #b1 #b0)
                  (bvor (ite (fp.isInfinite left) #b1 #b0)
                        (ite (fp.isNaN left) #b1 #b0)))))
  (= a!1 #b1)))
(assert (let ((a!1 (bvxor (bvnot |left start range_negZero|)
                  (bvand (ite (fp.isNegative left) #b1 #b0)
                         (ite (fp.isZero left) #b1 #b0)))))
  (= a!1 #b1)))
(assert (= (bvxor (ite (fp.lt left (fp #b1 #b10000011110 #x0000000000000)) #b1 #b0)
          |left start range_hasLowerBound|)
   #b1))
(assert (= (bvxor (ite (fp.gt left (fp #b0 #b10000011101 #xfffffffc00000)) #b1 #b0)
          |left start range_hasUpperBound|)
   #b1))
(assert (let ((a!1 (ite (fp.geq left
                        ((_ to_fp 11 53)
                          roundNearestTiesToEven
                          ((_ zero_extend 32) |left start range_lower|)))
                #b1
                #b0)))
  (= (bvxor (bvnot |left start range_hasLowerBound|) a!1) #b1)))
(assert (let ((a!1 (ite (fp.leq left
                        ((_ to_fp 11 53)
                          roundNearestTiesToEven
                          ((_ zero_extend 32) |left start range_upper|)))
                #b1
                #b0)))
  (= (bvxor (bvnot |left start range_hasUpperBound|) a!1) #b1)))
(assert (let ((a!1 (ite (= ((_ extract 51 0) (fp.to_ieee_bv left)) #x0000000000000)
                #b1
                #b0))
      (a!2 (bvadd (bvsub ((_ extract 62 52) (fp.to_ieee_bv left)) #b01111111111)
                  #b00000000001)))
(let ((a!3 (ite (= a!1 #b1)
                (bvsub ((_ extract 62 52) (fp.to_ieee_bv left)) #b01111111111)
                a!2)))
(let ((a!4 (bvxor (bvor (ite (fp.isInfinite left) #b1 #b0)
                        (ite (fp.isNaN left) #b1 #b0))
                  (ite (= |left start range_exp| ((_ zero_extend 5) a!3))
                       #b1
                       #b0))))
  (= a!4 #b1)))))
(assert (let ((a!1 (bvxor (ite (bvult |right start range_exp| (bvadd #x0001 #x03ff))
                       #b1
                       #b0)
                  (ite (fp.isInfinite right) #b1 #b0))))
  (= a!1 #b1)))
(assert (let ((a!1 (bvxor (ite (bvult |right start range_exp| #xffff) #b1 #b0)
                  (bvor (ite (fp.isInfinite right) #b1 #b0)
                        (ite (fp.isNaN right) #b1 #b0)))))
  (= a!1 #b1)))
(assert (let ((a!1 (bvxor (bvnot |right start range_negZero|)
                  (bvand (ite (fp.isNegative right) #b1 #b0)
                         (ite (fp.isZero right) #b1 #b0)))))
  (= a!1 #b1)))
(assert (= (bvxor (ite (fp.lt right (fp #b1 #b10000011110 #x0000000000000)) #b1 #b0)
          |right start range_hasLowerBound|)
   #b1))
(assert (= (bvxor (ite (fp.gt right (fp #b0 #b10000011101 #xfffffffc00000)) #b1 #b0)
          |right start range_hasUpperBound|)
   #b1))
(assert (let ((a!1 (ite (fp.geq right
                        ((_ to_fp 11 53)
                          roundNearestTiesToEven
                          ((_ zero_extend 32) |right start range_lower|)))
                #b1
                #b0)))
  (= (bvxor (bvnot |right start range_hasLowerBound|) a!1) #b1)))
(assert (let ((a!1 (ite (fp.leq right
                        ((_ to_fp 11 53)
                          roundNearestTiesToEven
                          ((_ zero_extend 32) |right start range_upper|)))
                #b1
                #b0)))
  (= (bvxor (bvnot |right start range_hasUpperBound|) a!1) #b1)))
(assert (let ((a!1 (ite (= ((_ extract 51 0) (fp.to_ieee_bv right)) #x0000000000000)
                #b1
                #b0))
      (a!2 (bvadd (bvsub ((_ extract 62 52) (fp.to_ieee_bv right))
                         #b01111111111)
                  #b00000000001)))
(let ((a!3 (ite (= a!1 #b1)
                (bvsub ((_ extract 62 52) (fp.to_ieee_bv right)) #b01111111111)
                a!2)))
(let ((a!4 (bvxor (bvor (ite (fp.isInfinite right) #b1 #b0)
                        (ite (fp.isNaN right) #b1 #b0))
                  (ite (= |right start range_exp| ((_ zero_extend 5) a!3))
                       #b1
                       #b0))))
  (= a!4 #b1)))))
(assert (= result_hasLowerBound #b1))
(assert (let ((a!1 (= (ite (fp.gt (fp.mul roundNearestTiesToEven left right)
                          (fp #b0 #b10000011101 #xfffffffc00000))
                   #b1
                   #b0)
              #b1))
      (a!2 (= (ite (fp.lt (fp.mul roundNearestTiesToEven left right)
                          (fp #b1 #b10000011110 #x0000000000000))
                   #b1
                   #b0)
              #b1)))
(let ((a!3 ((_ fp.to_sbv 32)
             roundNearestTiesToEven
             (ite a!1
                  (fp #b0 #b10000011101 #xfffffffc00000)
                  (ite a!2
                       (fp #b1 #b10000011110 #x0000000000000)
                       (fp.mul roundNearestTiesToEven left right))))))
  (= (ite (bvslt a!3 result_lower) #b1 #b0) #b1))))
