(declare-fun |left start range_upper| () (_ BitVec 32))
(declare-fun |left start range_lower| () (_ BitVec 32))
(declare-fun |left start range_hasLowerBound| () (_ BitVec 1))
(declare-fun |left start range_hasUpperBound| () (_ BitVec 1))
(declare-fun |right start range_upper| () (_ BitVec 32))
(declare-fun |right start range_lower| () (_ BitVec 32))
(declare-fun |right start range_hasLowerBound| () (_ BitVec 1))
(declare-fun |right start range_hasUpperBound| () (_ BitVec 1))
(declare-fun |left start range_exp| () (_ BitVec 16))
(declare-fun |right start range_exp| () (_ BitVec 16))
(declare-fun result_exp () (_ BitVec 16))
(declare-fun result_exp_undef () (_ BitVec 1))
(declare-fun |right start range_hasFract| () (_ BitVec 1))
(declare-fun |left start range_hasFract| () (_ BitVec 1))
(declare-fun result_hasFract () (_ BitVec 1))
(declare-fun result_hasFract_undef () (_ BitVec 1))
(declare-fun |right start range_negZero| () (_ BitVec 1))
(declare-fun |left start range_negZero| () (_ BitVec 1))
(declare-fun result_negZero () (_ BitVec 1))
(declare-fun result_negZero_undef () (_ BitVec 1))
(declare-fun result_lower () (_ BitVec 32))
(declare-fun result_lower_undef () (_ BitVec 1))
(declare-fun result_hasLowerBound () (_ BitVec 1))
(declare-fun result_hasLowerBound_undef () (_ BitVec 1))
(declare-fun result_upper () (_ BitVec 32))
(declare-fun result_upper_undef () (_ BitVec 1))
(declare-fun result_hasUpperBound () (_ BitVec 1))
(declare-fun result_hasUpperBound_undef () (_ BitVec 1))
(declare-fun left () (_ FloatingPoint 11 53))
(declare-fun right () (_ FloatingPoint 11 53))
(assert (= (ite (bvsle |left start range_lower| |left start range_upper|) #b1 #b0) #b1))
(assert (let ((a!1 (ite (fp.leq ((_ to_fp 11 53)
                          roundNearestTiesToEven
                          ((_ zero_extend 32) |left start range_lower|))
                        ((_ to_fp 11 53)
                          roundNearestTiesToEven
                          ((_ zero_extend 32) |left start range_upper|)))
                #b1
                #b0)))
  (= a!1 #b1)))
(assert (= (bvor (ite (= |left start range_lower| #x80000000) #b1 #b0)
         |left start range_hasLowerBound|)
   #b1))
(assert (= (bvor (ite (= |left start range_upper| #x7fffffff) #b1 #b0)
         |left start range_hasUpperBound|)
   #b1))
(assert (= (ite (bvsle |right start range_lower| |right start range_upper|) #b1 #b0)
   #b1))
(assert (let ((a!1 (ite (fp.leq ((_ to_fp 11 53)
                          roundNearestTiesToEven
                          ((_ zero_extend 32) |right start range_lower|))
                        ((_ to_fp 11 53)
                          roundNearestTiesToEven
                          ((_ zero_extend 32) |right start range_upper|)))
                #b1
                #b0)))
  (= a!1 #b1)))
(assert (= (bvor (ite (= |right start range_lower| #x80000000) #b1 #b0)
         |right start range_hasLowerBound|)
   #b1))
(assert (= (bvor (ite (= |right start range_upper| #x7fffffff) #b1 #b0)
         |right start range_hasUpperBound|)
   #b1))
(assert (let ((a!1 (bvand (ite (bvuge |left start range_exp| (bvadd #x0001 #x03ff))
                       #b1
                       #b0)
                  (ite (bvuge |right start range_exp| (bvadd #x0001 #x03ff))
                       #b1
                       #b0)))
      (a!2 (ite (= (ite (bvuge |right start range_exp| |left start range_exp|)
                        #b1
                        #b0)
                   #b1)
                |right start range_exp|
                |left start range_exp|)))
(let ((a!3 (ite (= (ite (bvule a!2 #x03ff) #b1 #b0) #b1) (bvadd a!2 #x0001) a!2)))
  (= result_exp (ite (= a!1 #b1) #xffff a!3)))))
(assert (let ((a!1 (ite (= (ite (bvuge |right start range_exp| |left start range_exp|)
                        #b1
                        #b0)
                   #b1)
                |right start range_exp|
                |left start range_exp|))
      (a!4 (= ((_ extract 16 16)
                (bvadd ((_ zero_extend 1) #x0001) ((_ zero_extend 1) #x03ff)))
              #b0))
      (a!5 (ite (=> (and (bvslt #x0001 #x0000) (bvslt #x03ff #x0000))
                    (bvslt (bvadd #x0001 #x03ff) #x0000))
                #b1
                #b0)))
(let ((a!2 (= ((_ extract 16 16)
                (bvadd ((_ zero_extend 1) a!1) ((_ zero_extend 1) #x0001)))
              #b0))
      (a!3 (ite (=> (and (bvslt a!1 #x0000) (bvslt #x0001 #x0000))
                    (bvslt (bvadd a!1 #x0001) #x0000))
                #b1
                #b0))
      (a!6 (bvor #b0 (bvor #b0 #b0) (bvnot (ite a!4 #b1 #b0)) (bvnot a!5))))
  (= result_exp_undef
     (bvor (bvor #b0 #b0)
           (bvor (bvor #b0 #b0) #b0)
           (bvor (bvor #b0 #b0) #b0)
           (bvnot (ite a!2 #b1 #b0))
           (bvnot a!3)
           a!6
           a!6
           #b0)))))
(assert (= result_hasFract
   (bvor |left start range_hasFract| |right start range_hasFract|)))
(assert (= result_hasFract_undef (bvor #b0 #b0)))
(assert (= result_negZero
   (bvand |left start range_negZero| |right start range_negZero|)))
(assert (= result_negZero_undef (bvor #b0 #b0)))
(assert (let ((a!1 (ite (= (bvor |left start range_hasLowerBound|
                         |right start range_hasUpperBound|)
                   #b1)
                (bvsub ((_ sign_extend 32) #x80000000) #x0000000000000001)
                (bvsub ((_ sign_extend 32) |left start range_lower|)
                       ((_ sign_extend 32) |right start range_upper|)))))
(let ((a!2 (= (ite (bvslt a!1 ((_ sign_extend 32) #x80000000)) #b1 #b0) #b1))
      (a!3 (= (ite (bvsgt a!1 ((_ sign_extend 32) #x7fffffff)) #b1 #b0) #b1)))
  (= (ite a!2 #x80000000 (ite a!3 #x7fffffff ((_ extract 31 0) a!1)))
     result_lower))))
(assert (let ((a!1 (and (bvslt #x0000000000000000
                       ((_ sign_extend 32) |left start range_lower|))
                (bvslt #x0000000000000000
                       (bvneg ((_ sign_extend 32) |right start range_upper|)))))
      (a!2 (bvslt #x0000000000000000
                  (bvadd ((_ sign_extend 32) |left start range_lower|)
                         (bvneg ((_ sign_extend 32) |right start range_upper|)))))
      (a!4 (and (bvslt ((_ sign_extend 32) |left start range_lower|)
                       #x0000000000000000)
                (bvslt (bvneg ((_ sign_extend 32) |right start range_upper|))
                       #x0000000000000000)))
      (a!5 (bvslt (bvadd ((_ sign_extend 32) |left start range_lower|)
                         (bvneg ((_ sign_extend 32) |right start range_upper|)))
                  #x0000000000000000))
      (a!7 (=> (and (bvslt #x0000000000000000 ((_ sign_extend 32) #x80000000))
                    (bvslt #x0000000000000000 (bvneg #x0000000000000001)))
               (bvslt #x0000000000000000
                      (bvadd ((_ sign_extend 32) #x80000000)
                             (bvneg #x0000000000000001)))))
      (a!9 (=> (and (bvslt ((_ sign_extend 32) #x80000000) #x0000000000000000)
                    (bvslt (bvneg #x0000000000000001) #x0000000000000000))
               (bvslt (bvadd ((_ sign_extend 32) #x80000000)
                             (bvneg #x0000000000000001))
                      #x0000000000000000))))
(let ((a!3 (ite (ite (= ((_ sign_extend 32) |right start range_upper|)
                        (bvshl #x0000000000000001 #x000000000000003f))
                     (bvslt ((_ sign_extend 32) |left start range_lower|)
                            #x0000000000000000)
                     (=> a!1 a!2))
                #b1
                #b0))
      (a!6 (ite (=> (bvslt #x0000000000000000
                           ((_ sign_extend 32) |right start range_upper|))
                    (=> a!4 a!5))
                #b1
                #b0))
      (a!8 (ite (ite (= #x0000000000000001
                        (bvshl #x0000000000000001 #x000000000000003f))
                     (bvslt ((_ sign_extend 32) #x80000000) #x0000000000000000)
                     a!7)
                #b1
                #b0))
      (a!10 (bvnot (ite (=> (bvslt #x0000000000000000 #x0000000000000001) a!9)
                        #b1
                        #b0))))
(let ((a!11 (bvor (bvor #b0 #b0)
                  (bvnot a!3)
                  (bvnot a!6)
                  (bvor #b0 #b0)
                  (bvor #b0 #b0)
                  (bvnot a!8)
                  a!10)))
  (= (bvor a!11 (bvor a!11 #b0 #b0) (bvor a!11 #b0 #b0)) result_lower_undef)))))
(assert (let ((a!1 (ite (= (bvor |left start range_hasLowerBound|
                         |right start range_hasUpperBound|)
                   #b1)
                (bvsub ((_ sign_extend 32) #x80000000) #x0000000000000001)
                (bvsub ((_ sign_extend 32) |left start range_lower|)
                       ((_ sign_extend 32) |right start range_upper|)))))
(let ((a!2 (= (ite (bvslt a!1 ((_ sign_extend 32) #x80000000)) #b1 #b0) #b1))
      (a!3 (= (ite (bvsgt a!1 ((_ sign_extend 32) #x7fffffff)) #b1 #b0) #b1)))
  (= (ite a!2 #b0 (ite a!3 #b1 #b1)) result_hasLowerBound))))
(assert (let ((a!1 (and (bvslt #x0000000000000000
                       ((_ sign_extend 32) |left start range_lower|))
                (bvslt #x0000000000000000
                       (bvneg ((_ sign_extend 32) |right start range_upper|)))))
      (a!2 (bvslt #x0000000000000000
                  (bvadd ((_ sign_extend 32) |left start range_lower|)
                         (bvneg ((_ sign_extend 32) |right start range_upper|)))))
      (a!4 (and (bvslt ((_ sign_extend 32) |left start range_lower|)
                       #x0000000000000000)
                (bvslt (bvneg ((_ sign_extend 32) |right start range_upper|))
                       #x0000000000000000)))
      (a!5 (bvslt (bvadd ((_ sign_extend 32) |left start range_lower|)
                         (bvneg ((_ sign_extend 32) |right start range_upper|)))
                  #x0000000000000000))
      (a!7 (=> (and (bvslt #x0000000000000000 ((_ sign_extend 32) #x80000000))
                    (bvslt #x0000000000000000 (bvneg #x0000000000000001)))
               (bvslt #x0000000000000000
                      (bvadd ((_ sign_extend 32) #x80000000)
                             (bvneg #x0000000000000001)))))
      (a!9 (=> (and (bvslt ((_ sign_extend 32) #x80000000) #x0000000000000000)
                    (bvslt (bvneg #x0000000000000001) #x0000000000000000))
               (bvslt (bvadd ((_ sign_extend 32) #x80000000)
                             (bvneg #x0000000000000001))
                      #x0000000000000000))))
(let ((a!3 (ite (ite (= ((_ sign_extend 32) |right start range_upper|)
                        (bvshl #x0000000000000001 #x000000000000003f))
                     (bvslt ((_ sign_extend 32) |left start range_lower|)
                            #x0000000000000000)
                     (=> a!1 a!2))
                #b1
                #b0))
      (a!6 (ite (=> (bvslt #x0000000000000000
                           ((_ sign_extend 32) |right start range_upper|))
                    (=> a!4 a!5))
                #b1
                #b0))
      (a!8 (ite (ite (= #x0000000000000001
                        (bvshl #x0000000000000001 #x000000000000003f))
                     (bvslt ((_ sign_extend 32) #x80000000) #x0000000000000000)
                     a!7)
                #b1
                #b0))
      (a!10 (bvnot (ite (=> (bvslt #x0000000000000000 #x0000000000000001) a!9)
                        #b1
                        #b0))))
(let ((a!11 (bvor (bvor #b0 #b0)
                  (bvnot a!3)
                  (bvnot a!6)
                  (bvor #b0 #b0)
                  (bvor #b0 #b0)
                  (bvnot a!8)
                  a!10
                  #b0
                  #b0)))
  (= (bvor #b0 a!11 a!11) result_hasLowerBound_undef)))))
(assert (let ((a!1 (ite (= (bvor |left start range_hasUpperBound|
                         |right start range_hasLowerBound|)
                   #b1)
                (bvadd ((_ sign_extend 32) #x7fffffff) #x0000000000000001)
                (bvsub ((_ sign_extend 32) |left start range_upper|)
                       ((_ sign_extend 32) |right start range_lower|)))))
(let ((a!2 (= (ite (bvslt a!1 ((_ sign_extend 32) #x80000000)) #b1 #b0) #b1))
      (a!3 (= (ite (bvsgt a!1 ((_ sign_extend 32) #x7fffffff)) #b1 #b0) #b1)))
  (= (ite a!2 #x80000000 (ite a!3 #x7fffffff ((_ extract 31 0) a!1)))
     result_upper))))
(assert (let ((a!1 (and (bvslt #x0000000000000000
                       ((_ sign_extend 32) |left start range_upper|))
                (bvslt #x0000000000000000
                       (bvneg ((_ sign_extend 32) |right start range_lower|)))))
      (a!2 (bvslt #x0000000000000000
                  (bvadd ((_ sign_extend 32) |left start range_upper|)
                         (bvneg ((_ sign_extend 32) |right start range_lower|)))))
      (a!4 (and (bvslt ((_ sign_extend 32) |left start range_upper|)
                       #x0000000000000000)
                (bvslt (bvneg ((_ sign_extend 32) |right start range_lower|))
                       #x0000000000000000)))
      (a!5 (bvslt (bvadd ((_ sign_extend 32) |left start range_upper|)
                         (bvneg ((_ sign_extend 32) |right start range_lower|)))
                  #x0000000000000000))
      (a!7 (=> (and (bvslt #x0000000000000000 ((_ sign_extend 32) #x7fffffff))
                    (bvslt #x0000000000000000 #x0000000000000001))
               (bvslt #x0000000000000000
                      (bvadd ((_ sign_extend 32) #x7fffffff) #x0000000000000001))))
      (a!8 (=> (and (bvslt ((_ sign_extend 32) #x7fffffff) #x0000000000000000)
                    (bvslt #x0000000000000001 #x0000000000000000))
               (bvslt (bvadd ((_ sign_extend 32) #x7fffffff) #x0000000000000001)
                      #x0000000000000000))))
(let ((a!3 (ite (ite (= ((_ sign_extend 32) |right start range_lower|)
                        (bvshl #x0000000000000001 #x000000000000003f))
                     (bvslt ((_ sign_extend 32) |left start range_upper|)
                            #x0000000000000000)
                     (=> a!1 a!2))
                #b1
                #b0))
      (a!6 (ite (=> (bvslt #x0000000000000000
                           ((_ sign_extend 32) |right start range_lower|))
                    (=> a!4 a!5))
                #b1
                #b0)))
(let ((a!9 (bvor (bvor #b0 #b0)
                 (bvnot a!3)
                 (bvnot a!6)
                 (bvor #b0 #b0)
                 (bvor #b0 #b0)
                 (bvnot (ite a!7 #b1 #b0))
                 (bvnot (ite a!8 #b1 #b0)))))
  (= (bvor a!9 (bvor a!9 #b0 #b0) (bvor a!9 #b0 #b0)) result_upper_undef)))))
(assert (let ((a!1 (ite (= (bvor |left start range_hasUpperBound|
                         |right start range_hasLowerBound|)
                   #b1)
                (bvadd ((_ sign_extend 32) #x7fffffff) #x0000000000000001)
                (bvsub ((_ sign_extend 32) |left start range_upper|)
                       ((_ sign_extend 32) |right start range_lower|)))))
(let ((a!2 (= (ite (bvslt a!1 ((_ sign_extend 32) #x80000000)) #b1 #b0) #b1))
      (a!3 (= (ite (bvsgt a!1 ((_ sign_extend 32) #x7fffffff)) #b1 #b0) #b1)))
  (= (ite a!2 #b1 (ite a!3 #b0 #b1)) result_hasUpperBound))))
(assert (let ((a!1 (and (bvslt #x0000000000000000
                       ((_ sign_extend 32) |left start range_upper|))
                (bvslt #x0000000000000000
                       (bvneg ((_ sign_extend 32) |right start range_lower|)))))
      (a!2 (bvslt #x0000000000000000
                  (bvadd ((_ sign_extend 32) |left start range_upper|)
                         (bvneg ((_ sign_extend 32) |right start range_lower|)))))
      (a!4 (and (bvslt ((_ sign_extend 32) |left start range_upper|)
                       #x0000000000000000)
                (bvslt (bvneg ((_ sign_extend 32) |right start range_lower|))
                       #x0000000000000000)))
      (a!5 (bvslt (bvadd ((_ sign_extend 32) |left start range_upper|)
                         (bvneg ((_ sign_extend 32) |right start range_lower|)))
                  #x0000000000000000))
      (a!7 (=> (and (bvslt #x0000000000000000 ((_ sign_extend 32) #x7fffffff))
                    (bvslt #x0000000000000000 #x0000000000000001))
               (bvslt #x0000000000000000
                      (bvadd ((_ sign_extend 32) #x7fffffff) #x0000000000000001))))
      (a!8 (=> (and (bvslt ((_ sign_extend 32) #x7fffffff) #x0000000000000000)
                    (bvslt #x0000000000000001 #x0000000000000000))
               (bvslt (bvadd ((_ sign_extend 32) #x7fffffff) #x0000000000000001)
                      #x0000000000000000))))
(let ((a!3 (ite (ite (= ((_ sign_extend 32) |right start range_lower|)
                        (bvshl #x0000000000000001 #x000000000000003f))
                     (bvslt ((_ sign_extend 32) |left start range_upper|)
                            #x0000000000000000)
                     (=> a!1 a!2))
                #b1
                #b0))
      (a!6 (ite (=> (bvslt #x0000000000000000
                           ((_ sign_extend 32) |right start range_lower|))
                    (=> a!4 a!5))
                #b1
                #b0)))
(let ((a!9 (bvor (bvor #b0 #b0)
                 (bvnot a!3)
                 (bvnot a!6)
                 (bvor #b0 #b0)
                 (bvor #b0 #b0)
                 (bvnot (ite a!7 #b1 #b0))
                 (bvnot (ite a!8 #b1 #b0))
                 #b0
                 #b0)))
  (= (bvor #b0 a!9 a!9) result_hasUpperBound_undef)))))
(assert (let ((a!1 (bvxor (ite (bvult |left start range_exp| (bvadd #x0001 #x03ff))
                       #b1
                       #b0)
                  (ite (fp.isInfinite left) #b1 #b0))))
  (= a!1 #b1)))
(assert (let ((a!1 (bvxor (ite (bvult |left start range_exp| #xffff) #b1 #b0)
                  (bvor (ite (fp.isInfinite left) #b1 #b0)
                        (ite (fp.isNaN left) #b1 #b0)))))
  (= a!1 #b1)))
(assert (let ((a!1 (bvxor (bvnot |left start range_negZero|)
                  (bvand (ite (fp.isNegative left) #b1 #b0)
                         (ite (fp.isZero left) #b1 #b0)))))
  (= a!1 #b1)))
(assert (= (bvxor (ite (fp.lt left (fp #b1 #b10000011110 #x0000000000000)) #b1 #b0)
          |left start range_hasLowerBound|)
   #b1))
(assert (= (bvxor (ite (fp.gt left (fp #b0 #b10000011101 #xfffffffc00000)) #b1 #b0)
          |left start range_hasUpperBound|)
   #b1))
(assert (let ((a!1 (ite (fp.geq left
                        ((_ to_fp 11 53)
                          roundNearestTiesToEven
                          ((_ zero_extend 32) |left start range_lower|)))
                #b1
                #b0)))
  (= (bvxor (bvnot |left start range_hasLowerBound|) a!1) #b1)))
(assert (let ((a!1 (ite (fp.leq left
                        ((_ to_fp 11 53)
                          roundNearestTiesToEven
                          ((_ zero_extend 32) |left start range_upper|)))
                #b1
                #b0)))
  (= (bvxor (bvnot |left start range_hasUpperBound|) a!1) #b1)))
(assert (let ((a!1 (ite (= ((_ extract 51 0) (fp.to_ieee_bv left)) #x0000000000000)
                #b1
                #b0))
      (a!2 (bvadd (bvsub ((_ extract 62 52) (fp.to_ieee_bv left)) #b01111111111)
                  #b00000000001)))
(let ((a!3 (ite (= a!1 #b1)
                (bvsub ((_ extract 62 52) (fp.to_ieee_bv left)) #b01111111111)
                a!2)))
(let ((a!4 (bvxor (bvor (ite (fp.isInfinite left) #b1 #b0)
                        (ite (fp.isNaN left) #b1 #b0))
                  (ite (= |left start range_exp| ((_ zero_extend 5) a!3))
                       #b1
                       #b0))))
  (= a!4 #b1)))))
(assert (let ((a!1 (bvxor (ite (bvult |right start range_exp| (bvadd #x0001 #x03ff))
                       #b1
                       #b0)
                  (ite (fp.isInfinite right) #b1 #b0))))
  (= a!1 #b1)))
(assert (let ((a!1 (bvxor (ite (bvult |right start range_exp| #xffff) #b1 #b0)
                  (bvor (ite (fp.isInfinite right) #b1 #b0)
                        (ite (fp.isNaN right) #b1 #b0)))))
  (= a!1 #b1)))
(assert (let ((a!1 (bvxor (bvnot |right start range_negZero|)
                  (bvand (ite (fp.isNegative right) #b1 #b0)
                         (ite (fp.isZero right) #b1 #b0)))))
  (= a!1 #b1)))
(assert (= (bvxor (ite (fp.lt right (fp #b1 #b10000011110 #x0000000000000)) #b1 #b0)
          |right start range_hasLowerBound|)
   #b1))
(assert (= (bvxor (ite (fp.gt right (fp #b0 #b10000011101 #xfffffffc00000)) #b1 #b0)
          |right start range_hasUpperBound|)
   #b1))
(assert (let ((a!1 (ite (fp.geq right
                        ((_ to_fp 11 53)
                          roundNearestTiesToEven
                          ((_ zero_extend 32) |right start range_lower|)))
                #b1
                #b0)))
  (= (bvxor (bvnot |right start range_hasLowerBound|) a!1) #b1)))
(assert (let ((a!1 (ite (fp.leq right
                        ((_ to_fp 11 53)
                          roundNearestTiesToEven
                          ((_ zero_extend 32) |right start range_upper|)))
                #b1
                #b0)))
  (= (bvxor (bvnot |right start range_hasUpperBound|) a!1) #b1)))
(assert (let ((a!1 (ite (= ((_ extract 51 0) (fp.to_ieee_bv right)) #x0000000000000)
                #b1
                #b0))
      (a!2 (bvadd (bvsub ((_ extract 62 52) (fp.to_ieee_bv right))
                         #b01111111111)
                  #b00000000001)))
(let ((a!3 (ite (= a!1 #b1)
                (bvsub ((_ extract 62 52) (fp.to_ieee_bv right)) #b01111111111)
                a!2)))
(let ((a!4 (bvxor (bvor (ite (fp.isInfinite right) #b1 #b0)
                        (ite (fp.isNaN right) #b1 #b0))
                  (ite (= |right start range_exp| ((_ zero_extend 5) a!3))
                       #b1
                       #b0))))
  (= a!4 #b1)))))
(assert (= result_hasLowerBound #b1))
(assert (let ((a!1 (= (ite (fp.gt (fp.sub roundNearestTiesToEven left right)
                          (fp #b0 #b10000011101 #xfffffffc00000))
                   #b1
                   #b0)
              #b1))
      (a!2 (= (ite (fp.lt (fp.sub roundNearestTiesToEven left right)
                          (fp #b1 #b10000011110 #x0000000000000))
                   #b1
                   #b0)
              #b1)))
(let ((a!3 ((_ fp.to_sbv 32)
             roundNearestTiesToEven
             (ite a!1
                  (fp #b0 #b10000011101 #xfffffffc00000)
                  (ite a!2
                       (fp #b1 #b10000011110 #x0000000000000)
                       (fp.sub roundNearestTiesToEven left right))))))
  (= (ite (bvslt a!3 result_lower) #b1 #b0) #b1))))
